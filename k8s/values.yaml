global:
  imageRegistry: ""
  imagePullSecrets: []
  defaultStorageClass: ""
  storageClass: ""
  compatibility:
    openshift:
      adaptSecurityContext: auto

kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []
commonLabels: {}
commonAnnotations: {}
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

auth:
  username: user
  password: ""
  fernetKey: ""
  secretKey: ""
  existingSecret: ""

executor: KubernetesExecutor

loadExamples: false

configuration: ""

existingConfigmap: ""

dags:
  existingConfigmap: ""
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r27
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []


# 기존 Secret에서 환경 변수 주입
extraEnvVarsCM: ""
extraEnvVarsSecret: "mongodb-secret"

extraEnvVars:

extraEnvVarsSecrets:
  - name: MONGO_USERNAME
    secretKeyRef:
      name: mongodb-secret
      key: mongo-username
  - name: MONGO_PASSWORD
    secretKeyRef:
      name: mongodb-secret
      key: mongo-password
  - name: MONGO_URI
    value: "mongodb+srv://$(MONGO_USERNAME):$(MONGO_PASSWORD)@swdc-cluster01.whgi16p.mongodb.net/?retryWrites=true&w=majority"

sidecars: []
initContainers: []

extraVolumeMounts: []
extraVolumes: []

web:
  image:
    registry: docker.io
    repository: bitnami/airflow
    tag: 2.9.3-debian-12-r8
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  baseUrl: ""
  existingConfigmap: ""
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraEnvVarsSecrets: []
  containerPorts:
    http: 8080
  replicaCount: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "medium"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  lifecycleHooks: {}
  automountServiceAccountToken: true
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  sidecars: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

scheduler:
  image:
    registry: docker.io
    repository: bitnami/airflow-scheduler
    tag: 2.9.3-debian-12-r4
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  replicaCount: 1
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraEnvVarsSecrets: []
  livenessProbe:
    enabled: true
    initialDelaySeconds: 300
    periodSeconds: 20
    timeoutSeconds: 30
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 300
    periodSeconds: 10
    timeoutSeconds: 30
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: true
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 30
    failureThreshold: 20
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "small"
  resources:
    limits:
      cpu: 1000m 
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  lifecycleHooks: {}
  automountServiceAccountToken: true
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  sidecars: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

worker:
  image:
    registry: docker.io
    repository: bitnami/airflow-worker
    tag: 2.9.3-debian-12-r4
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    debug: false
  command: []
  args: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraEnvVarsSecrets: []
  containerPorts:
    http: 8793
  replicaCount: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resourcesPreset: "large"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  lifecycleHooks: {}
  automountServiceAccountToken: true
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  tolerations: []
  topologySpreadConstraints: []
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
  sidecars: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraVolumeClaimTemplates: []
  podTemplate: {}
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  autoscaling:
    enabled: true
    minReplicas: 0
    maxReplicas: 10
    targetCPU: 70  # CPU 사용률이 70%를 초과하면 확장
    targetMemory: 80  # 메모리 사용률이 80%를 초과하면 확장
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
git:
  dags:
    enabled: false
    repositories:
      - repository: ""
        branch: ""
        name: ""
        path: ""
  clone:
    command: []
    args: []
    extraVolumeMounts: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    resources: {}
    resourcesPreset: "nano"
  sync:
    interval: 60
    command: []
    args: []
    extraVolumeMounts: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    resourcesPreset: "nano"
    resources: {}

redis:
  enabled: false

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  annotations: {}

rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "pods/log", "pods/exec"]
      verbs: ["get", "list", "create", "delete", "watch"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["create"]
    - apiGroups: [""]
      resources: ["services"]
      verbs: ["get"]

metrics:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/airflow-exporter
    tag: 0.20220314.0-debian-12-r41
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  containerPorts:
    http: 9112
  resourcesPreset: "nano"
  resources: {}
  podSecurityContext:
    enabled: true
    fsGroupChangePolicy: Always
    sysctls: []
    supplementalGroups: []
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    seLinuxOptions: {}
    runAsUser: 1001
    runAsGroup: 1001
    runAsNonRoot: true
    privileged: false
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: "RuntimeDefault"
  lifecycleHooks: {}
  automountServiceAccountToken: true
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  affinity: {}
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  nodeSelector: {}
  tolerations: []
  schedulerName: ""
  service:
    ports:
      http: 9112
    clusterIP: ""
    sessionAffinity: None
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "{{ .Values.metrics.service.ports.http }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    labels: {}
    selector: {}
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    jobLabel: ""
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
    extraIngress: []
    extraEgress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

postgresql:
  enabled: true
  auth:
    enablePostgresUser: true
    username: bn_airflow
    password: ""
    database: bitnami_airflow
    existingSecret: ""
  architecture: standalone
  primary:
    resourcesPreset: "nano"
    resources: {}

externalDatabase:
  host: localhost
  port: 5432
  user: bn_airflow
  database: bitnami_airflow
  password: ""
  existingSecret: ""
  existingSecretPasswordKey: ""


git:
  dags:
    enabled: true
    repositories:
      - repository: "https://$(GIT_USERNAME):$(GIT_TOKEN)@github.com/$(GIT_USERNAME)/opensw-contest-airflow-dags.git"
        branch: "main"  # 사용할 브랜치 이름
        name: "opensw-dags"  # 리포지토리의 로컬 식별자
  clone:
    command: []
    args: []
    extraVolumeMounts: []
    extraEnvVars:
      - name: GIT_USERNAME
        valueFrom:
          secretKeyRef:
            name: git-credentials-secret
            key: GIT_USERNAME
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: git-credentials-secret
            key: GIT_TOKEN
    resources: {}
    resourcesPreset: "nano"
  sync:
    interval: 60  # DAG 파일의 동기화 주기(초)
    command: []
    args: []
    extraVolumeMounts: []
    extraEnvVars:
      - name: GIT_USERNAME
        valueFrom:
          secretKeyRef:
            name: git-credentials-secret
            key: GIT_USERNAME
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: git-credentials-secret
            key: GIT_TOKEN
    resourcesPreset: "nano"
    resources: {}